// Конвертация Исходная от 18.03.2016 21:28:44
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьГруппуКонтрагента = КомпонентыОбмена.УзелКорреспондента.ВыгружатьГруппуКонтрагента;
		КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьКонтрагентыКакОрганизации = КомпонентыОбмена.УзелКорреспондента.ВыгружатьКонтрагентыКакОрганизации;
	Иначе
		КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьГруппуКонтрагента = Ложь;
		КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьКонтрагентыКакОрганизации = Ложь;
	КонецЕсли;
	
	КомпонентыОбмена.ПараметрыКонвертации.МассивВладельцевЕдиниц =  Новый Массив;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда 
		Для Каждого ТекВладелец Из КомпонентыОбмена.ПараметрыКонвертации.МассивВладельцевЕдиниц Цикл
			Если КомпонентыОбмена.ВыгруженныеОбъекты.Найти(ТекВладелец) = Неопределено Тогда
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ТекВладелец);
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
	Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
	    ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
	КонецЕсли;
		ДобавитьПОД_Документ_ОстаткиТМЦ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Договоры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_ПроизвольныйАлгоритм(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Товары_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_ОстаткиТМЦ_Отправка
Процедура ДобавитьПОД_Документ_ОстаткиТМЦ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиТМЦ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиТМЦ_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТМЦ_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиТМЦ_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивДокументов = Новый Массив;
	ТекДокумент = Новый Структура;
	
	ТМЦ = Новый ТаблицаЗначений;
	ТМЦ.Колонки.Добавить("Номенклатура");
	ТМЦ.Колонки.Добавить("Количество");
	ТМЦ.Колонки.Добавить("СуммаБезНДС");
	ТМЦ.Колонки.Добавить("ВидЗапасов");
	ТМЦ.Колонки.Добавить("ЕдиницаИзмерения");
	ТМЦ.Колонки.Добавить("НомерГТД");
	ТМЦ.Колонки.Добавить("СтранаПроисхождения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиТоваровОстатки.Товар КАК Номенклатура,
		|	ОстаткиТоваровОстатки.КоличествоОстаток КАК Количество,
		|	ОстаткиТоваровОстатки.СуммаОстаток КАК СуммаБезНДС,
		|	ОстаткиТоваровОстатки.Товар.ВидТовара КАК ВидЗапасов,
		|	ОстаткиТоваровОстатки.Товар.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваров.Остатки(&ДатаПолученияОстатков, ) КАК ОстаткиТоваровОстатки";
	
	Запрос.УстановитьПараметр("ДатаПолученияОстатков", КомпонентыОбмена.ПараметрыКонвертации.ДатаПолученияОстатков);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекСтрокаТМЦ = ТМЦ.Добавить();
		ЗаполнитьЗначенияСвойств(ТекСтрокаТМЦ, ВыборкаДетальныеЗаписи);
		ТекСтрокаТМЦ.НомерГТД = "001";
		ТекСтрокаТМЦ.СтранаПроисхождения = Новый Структура("Код, Наименование", "001", "Россия");
	КонецЦикла;
	
	ТекДокумент.Вставить("ТМЦ", ТМЦ);
	ТекДокумент.Вставить("Дата", КомпонентыОбмена.ПараметрыКонвертации.ДатаПолученияОстатков);
	ТекДокумент.Вставить("Организация", Новый Структура("ЮридическоеФизическоеЛицо","ЮридическоеЛицо"));
	
	МассивДокументов.Добавить(ТекДокумент);
	
	Возврат МассивДокументов;
КонецФункции
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры_Отправка
Процедура ДобавитьПОД_Справочник_Договоры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Договоры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Договоры_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения_Отправка
Процедура ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ЕдиницыИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ЕдиницыИзмерения_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ЕдиницыИзмерения_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	//ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Владелец);
	
	КомпонентыОбмена.ПараметрыКонвертации.МассивВладельцевЕдиниц.Добавить(ДанныеИБ.Владелец);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Организации_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьКонтрагентыКакОрганизации 
		ИЛИ ДанныеИБ.КодПоКлассификации <> 100 Тогда
		ИспользованиеПКО.Справочник_Контрагенты_Организации_Отправка = Ложь;
	КонецЕсли;
	
	Если ДанныеИБ.КодПоКлассификации = 200 Тогда
		ИспользованиеПКО.Справочник_Контрагенты_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_ПроизвольныйАлгоритм
Процедура ДобавитьПОД_Справочник_Номенклатура_ПроизвольныйАлгоритм(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_ПроизвольныйАлгоритм";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Справочник_Номенклатура_ПроизвольныйАлгоритм_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
КонецПроцедуры

Функция ПОД_Справочник_Номенклатура_ПроизвольныйАлгоритм_ВыборкаДанных(КомпонентыОбмена)
	МассивЭлементов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОстаткиТоваровОстатки.Товар КАК Номенклатура
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваров.Остатки(&ДатаПолученияОстатков, ) КАК ОстаткиТоваровОстатки";
	
	Запрос.УстановитьПараметр("ДатаПолученияОстатков", КомпонентыОбмена.ПараметрыКонвертации.ДатаПолученияОстатков);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивЭлементов.Добавить(ВыборкаДетальныеЗаписи.Номенклатура);
	КонецЦикла;
	
	
	Возврат МассивЭлементов;
КонецФункции
#КонецОбласти
#Область Справочник_ТипыЦен_Отправка
Процедура ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТипыЦен_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ТипыЦен;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочники_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Товары_Отправка
Процедура ДобавитьПОД_Справочник_Товары_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Товары_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Товары;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Товары_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Товары_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = 
												Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа    = 
												ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Справочник_Валюты_Получение
Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты_Получение");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ОстаткиТМЦ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Договоры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДополнительныеРеквизиты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмерения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЗначенияДопРеквизитов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтрагентыГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочники_ТипыЦен(ПравилаКонвертации);
КонецПроцедуры

#Область Отправка
#Область Документ_ОстаткиТМЦ_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиТМЦ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиТМЦ_Отправка";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТМЦ_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ТМЦ", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ТМЦ;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ТипыЗапасов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТМЦ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТМЦ", ДанныеИБ.ТМЦ);
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.СвойствоФормата = "AdditionalInfo";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочники_ТипыЦен";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Товар";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.СвойствоФормата = "Цена";

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ТабТовары = ДанныеИБ.Товары.Выгрузить();
	ТабТовары.Колонки.Товар.Имя = "Номенклатура";
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПКО_Справочник_Валюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Валюты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры_Отправка
Процедура ДобавитьПКО_Справочник_Договоры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Договоры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Договоры_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";

КонецПроцедуры

Процедура ПКО_Справочник_Договоры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ТекВидДоговора = "Прочее";
	Если СтрНайти(НРег(ДанныеИБ.ВидДоговора.Наименование), "поставщик")> 0 Тогда
		ТекВидДоговора = "СПоставщиком";
	ИначеЕсли СтрНайти(НРег(ДанныеИБ.ВидДоговора.Наименование), "покупател")> 0 Тогда
		ТекВидДоговора = "СПокупателем";
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", ТекВидДоговора);
	
	ТекОрганизация = Новый Структура;
	ТекОрганизация.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеЛицо");
	ТекОрганизация.Вставить("НаименованиеСокращенное", "Исходная ИБ");
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", ТекОрганизация);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДополнительныеРеквизиты_Отправка
Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДополнительныеРеквизиты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.ПланыВидовХарактеристик.СвойстваКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения_Отправка
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЕдиницыИзмерения_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЕдиницыИзмерения_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";

КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмерения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ТаблицаДопРеквизиты = Новый ТаблицаЗначений;
	ТаблицаДопРеквизиты.Колонки.Добавить("Свойство");
	ТаблицаДопРеквизиты.Колонки.Добавить("ЗначениеСвойства");
	
	ТекСвойство = Новый Структура("Наименование", "Владелец");
	
	ТекЗначение = ДанныеИБ.Владелец;
	
	ТекСтрокаДопРеквизиты = ТаблицаДопРеквизиты.Добавить();
	ТекСтрокаДопРеквизиты.Свойство = ТекСвойство;
	ТекСтрокаДопРеквизиты.ЗначениеСвойства = ТекЗначение;
	
	ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизиты);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗначенияДопРеквизитов_Отправка
Процедура ДобавитьПКО_Справочник_ЗначенияДопРеквизитов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЗначенияДопРеквизитов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДополнительныеСвойства;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Контрагенты_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоКлассификации";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ЮридическоеФизическоеЛицо";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ЮридическоеФизическоеЛицо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";

КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ОсновнойДоговор) Тогда
		ДанныеXDTO.Вставить("AdditionalInfo",Строка(ДанныеИБ.ОсновнойДоговор.УникальныйИдентификатор()));
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьГруппуКонтрагента Тогда
		ТекРодитель = Новый Структура;
		ТекРодитель.Вставить("Наименование");
		Если ДанныеИБ.ОсновнойДоговор.ВидДоговора.Наименование = "С покупателем" Тогда
			ТекРодитель.Наименование = "Покупатели";
		ИначеЕсли ДанныеИБ.ОсновнойДоговор.ВидДоговора.Наименование = "С поставщиком" Тогда
			ТекРодитель.Наименование = "Поставщики";
		Иначе
			ТекРодитель.Наименование = "Другие";
		КонецЕсли;
	
		ТекИнструкция = Новый Структура("ИмяПКО, Значение");
		ТекИнструкция.Значение = ТекРодитель;
		ТекИнструкция.ИмяПКО = "Справочник_КонтрагентыГруппа_Отправка";
	
		ДанныеXDTO.Вставить("Группа", ТекИнструкция);
	Иначе
		ДанныеXDTO.Вставить("Группа", Неопределено);
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗначенияСвойствКонтрагентов.Свойство,
			|	ЗначенияСвойствКонтрагентов.Значение
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствКонтрагентов КАК ЗначенияСвойствКонтрагентов
			|ГДЕ
			|	ЗначенияСвойствКонтрагентов.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект", ДанныеИБ.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ТабДопРеквизитов = Новый ТаблицаЗначений;
		ТабДопРеквизитов.Колонки.Добавить("Свойство");
		ТабДопРеквизитов.Колонки.Добавить("ЗначениеСвойства");
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекЗначение = "";
			Если ТипЗнч(ВыборкаДетальныеЗаписи.Значение) = Тип("Строка") Тогда
				ТекЗначение = ВыборкаДетальныеЗаписи.Значение;
			ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Значение) = Тип("СправочникСсылка.Подразделения") Тогда
				ТекЗначение = Новый Структура("ИмяПКО, Значение", "Справочник_Подразделения_Отправка", ВыборкаДетальныеЗаписи.Значение);
			ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Значение) = Тип("СправочникСсылка.Товары") Тогда
				ТекЗначение = Новый Структура("ИмяПКО, Значение", "Справочник_Номенклатура_Отправка", ВыборкаДетальныеЗаписи.Значение);
			ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Значение) = Тип("СправочникСсылка.ДополнительныеСвойства") Тогда
				ТекЗначение = Новый Структура("ИмяПКО, Значение", "Справочник_ЗначенияДопРеквизитов_Отправка", ВыборкаДетальныеЗаписи.Значение);
			ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Значение) = Тип("СправочникСсылка.Сотрудники") Тогда
				ТекЗначение = Строка(ВыборкаДетальныеЗаписи.Значение.УникальныйИдентификатор());
			Иначе
				Продолжить;
			КонецЕсли;
			
			ТекСтрока = ТабДопРеквизитов.Добавить();
			ТекСтрока.ЗначениеСвойства = ТекЗначение;
			ТекСтрока.Свойство = ВыборкаДетальныеЗаписи.Свойство;
		КонецЦикла;
		
		ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТабДопРеквизитов);
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа_Отправка
Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КонтрагентыГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Товары;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидТовара";
	НоваяСтрока.СвойствоФормата = "ТипНоменклатуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ТипыНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";

КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() = 1 Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмерения) Тогда
				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ЕдиницыИзмерения.Ссылка
				|ИЗ
				|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
				|ГДЕ
				|	ЕдиницыИзмерения.Владелец = &Владелец";
	
			Запрос.УстановитьПараметр("Владелец", ДанныеИБ.Ссылка);
	
			РезультатЗапроса = Запрос.Выполнить();
	
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				ДанныеXDTO.Вставить("ЕдиницаИзмерения", ВыборкаДетальныеЗаписи.Ссылка);
			Иначе
				ТекЕдиница = Новый Структура();
				ТекЕдиница.Вставить("Код", "001");
				ДанныеXDTO.Вставить("ЕдиницаИзмерения", ТекЕдиница);
			КонецЕсли;
	
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Товары;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Подразделения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Подразделения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#Область Справочники_ТипыЦен
Процедура ДобавитьПКО_Справочники_ТипыЦен(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочники_ТипыЦен";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ТипыЦен;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаЦены";
	НоваяСтрока.СвойствоФормата = "ВалютаЦены";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// Перечисление_ТипыЗапасов.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ТипыЗапасов";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыТоваров;
		ПравилоКонвертации.ТипXDTO = "ТипыЗапасов";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыТоваров.НаборКомплект, "СобственныеТовары");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыТоваров.Товар, "СобственныеТовары");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ЮридическоеФизическоеЛицо.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ЮридическоеФизическоеЛицо";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
		ПравилоКонвертации.ТипXDTO = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;

	// Перечисление_ТипыНоменклатуры.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_ТипыНоменклатуры";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыТоваров;
	ПравилоКонвертации.ТипXDTO = "ТипыНоменклатуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыТоваров.НаборКомплект, "Товар");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыТоваров.Товар, "Товар");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыТоваров.Услуга, "Услуга");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Товар", Перечисления.ВидыТоваров.НаборКомплект);
	ЗначенияДляПолучения.Вставить("Товар", Перечисления.ВидыТоваров.Товар);
	ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ВидыТоваров.Услуга);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы



#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ВыгружатьГруппуКонтрагента");
	ПараметрыКонвертации.Вставить("МассивВладельцевЕдиниц");
	ПараметрыКонвертации.Вставить("ДатаПолученияОстатков");
	ПараметрыКонвертации.Вставить("ВыгружатьКонтрагентыКакОрганизации");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Справочник_ЕдиницыИзмерения_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ЕдиницыИзмерения_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Товары_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Товары_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТМЦ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТМЦ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Договоры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Договоры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	КонецЕсли;
КонецПроцедуры
// Процедура-обертка, выполняет запуск указанной в параметрах функции модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяФункции - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Функция ВыполнитьФункциюМодуляМенеджера(ИмяФункции, Параметры) Экспорт
	Если ИмяФункции = "ПОД_Документ_ОстаткиТМЦ_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТМЦ_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_Номенклатура_ПроизвольныйАлгоритм_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_Номенклатура_ПроизвольныйАлгоритм_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецФункции

#КонецОбласти
